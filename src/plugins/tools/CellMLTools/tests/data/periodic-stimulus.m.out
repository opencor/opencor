function [VOI, STATES, ALGEBRAIC, CONSTANTS] = mainFunction()
    % This is the "main function".  In Matlab, things work best if you rename this function to match the filename.
   [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel();
end

function [algebraicVariableCount] = getAlgebraicVariableCount()
    % Used later when setting a global variable with the number of algebraic variables.
    % Note: This is not the "main method".
    algebraicVariableCount =13;
end
% There are a total of 4 entries in each of the rate and state variable arrays.
% There are a total of 14 entries in the constant variable array.
%

function [VOI, STATES, ALGEBRAIC, CONSTANTS] = solveModel()
    % Create ALGEBRAIC of correct size
    global algebraicVariableCount;  algebraicVariableCount = getAlgebraicVariableCount();
    % Initialise constants and state variables
    [INIT_STATES, CONSTANTS] = initConsts;

    % Set timespan to solve over
    tspan = [0, 10];

    % Set numerical accuracy options for ODE solver
    options = odeset('RelTol', 1e-06, 'AbsTol', 1e-06, 'MaxStep', 1);

    % Solve model with ODE solver
    [VOI, STATES] = ode15s(@(VOI, STATES)computeRates(VOI, STATES, CONSTANTS), tspan, INIT_STATES, options);

    % Compute algebraic variables
    [RATES, ALGEBRAIC] = computeRates(VOI, STATES, CONSTANTS);
    ALGEBRAIC = computeAlgebraic(ALGEBRAIC, CONSTANTS, STATES, VOI);

    % Plot state variables against variable of integration
    [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = createLegends();
    figure();
    plot(VOI, STATES);
    xlabel(LEGEND_VOI);
    l = legend(LEGEND_STATES);
    set(l,'Interpreter','none');
end

function [LEGEND_STATES, LEGEND_ALGEBRAIC, LEGEND_VOI, LEGEND_CONSTANTS] = createLegends()
    LEGEND_STATES = ''; LEGEND_ALGEBRAIC = ''; LEGEND_VOI = ''; LEGEND_CONSTANTS = '';
    LEGEND_CONSTANTS(:,1) = strpad('stimPeriod in component stimulus_protocol_params (ms)');
    LEGEND_CONSTANTS(:,2) = strpad('stimDuration in component stimulus_protocol_params (ms)');
    LEGEND_CONSTANTS(:,3) = strpad('stimCurrent in component stimulus_protocol_params (uA_per_cmsq)');
    LEGEND_VOI = strpad('time in component time (ms)');
    LEGEND_ALGEBRAIC(:,10) = strpad('INa in component INa (uA_per_cmsq)');
    LEGEND_ALGEBRAIC(:,12) = strpad('IK in component IK (uA_per_cmsq)');
    LEGEND_ALGEBRAIC(:,13) = strpad('Ileak in component Ileak (uA_per_cmsq)');
    LEGEND_STATES(:,1) = strpad('V in component action_potential (mV)');
    LEGEND_ALGEBRAIC(:,1) = strpad('minus_V in component action_potential (mV)');
    LEGEND_STATES(:,2) = strpad('X in component hh_gating_variable (dimensionless)');
    LEGEND_STATES(:,3) = strpad('X in component hh_gating_variable (dimensionless)');
    LEGEND_STATES(:,4) = strpad('X in component hh_gating_variable (dimensionless)');
    LEGEND_CONSTANTS(:,4) = strpad('V_initial in component initial_conditions (mV)');
    LEGEND_CONSTANTS(:,5) = strpad('n_initial in component initial_conditions (dimensionless)');
    LEGEND_CONSTANTS(:,6) = strpad('m_initial in component initial_conditions (dimensionless)');
    LEGEND_CONSTANTS(:,7) = strpad('h_initial in component initial_conditions (dimensionless)');
    LEGEND_ALGEBRAIC(:,2) = strpad('IStim in component stimulus_protocol (uA_per_cmsq)');
    LEGEND_CONSTANTS(:,8) = strpad('VNa in component parameters (mV)');
    LEGEND_CONSTANTS(:,9) = strpad('VK in component parameters (mV)');
    LEGEND_CONSTANTS(:,10) = strpad('Vleak in component parameters (mV)');
    LEGEND_CONSTANTS(:,11) = strpad('gNa_max in component parameters (mS_per_cmsq)');
    LEGEND_CONSTANTS(:,12) = strpad('gK_max in component parameters (mS_per_cmsq)');
    LEGEND_CONSTANTS(:,13) = strpad('gleak_max in component parameters (mS_per_cmsq)');
    LEGEND_CONSTANTS(:,14) = strpad('Cm in component parameters (uF_per_cmsq)');
    LEGEND_ALGEBRAIC(:,6) = strpad('gNa in component INa (mS_per_cmsq)');
    LEGEND_ALGEBRAIC(:,11) = strpad('gK in component IK (mS_per_cmsq)');
    LEGEND_ALGEBRAIC(:,3) = strpad('alpha in component alpha_m (per_ms)');
    LEGEND_ALGEBRAIC(:,7) = strpad('beta in component beta_m (per_ms)');
    LEGEND_ALGEBRAIC(:,4) = strpad('alpha in component alpha_h (per_ms)');
    LEGEND_ALGEBRAIC(:,8) = strpad('beta in component beta_h (per_ms)');
    LEGEND_ALGEBRAIC(:,5) = strpad('alpha in component alpha_n (per_ms)');
    LEGEND_ALGEBRAIC(:,9) = strpad('beta in component beta_n (per_ms)');
    LEGEND_RATES(:,1) = strpad('d/dt V in component action_potential (mV)');
    LEGEND_RATES(:,3) = strpad('d/dt X in component hh_gating_variable (dimensionless)');
    LEGEND_RATES(:,2) = strpad('d/dt X in component hh_gating_variable (dimensionless)');
    LEGEND_RATES(:,4) = strpad('d/dt X in component hh_gating_variable (dimensionless)');
    LEGEND_STATES  = LEGEND_STATES';
    LEGEND_ALGEBRAIC = LEGEND_ALGEBRAIC';
    LEGEND_RATES = LEGEND_RATES';
    LEGEND_CONSTANTS = LEGEND_CONSTANTS';
end

function [STATES, CONSTANTS] = initConsts()
    VOI = 0; CONSTANTS = []; STATES = []; ALGEBRAIC = [];
    CONSTANTS(:,1) = 50;
    CONSTANTS(:,2) = 0.5;
    CONSTANTS(:,3) = -10;
    CONSTANTS(:,4) = 0;
    CONSTANTS(:,5) = 0.315;
    CONSTANTS(:,6) = 0.042;
    CONSTANTS(:,7) = 0.608;
    CONSTANTS(:,8) = -115;
    CONSTANTS(:,9) = 12;
    CONSTANTS(:,10) = -10.613;
    CONSTANTS(:,11) = 120;
    CONSTANTS(:,12) = 36;
    CONSTANTS(:,13) = 0.3;
    CONSTANTS(:,14) = 1;
    STATES(:,1) = CONSTANTS(:,4);
    STATES(:,2) = CONSTANTS(:,7);
    STATES(:,3) = CONSTANTS(:,6);
    STATES(:,4) = CONSTANTS(:,5);
    if (isempty(STATES)), warning('Initial values for states not set');, end
end

function [RATES, ALGEBRAIC] = computeRates(VOI, STATES, CONSTANTS)
    global algebraicVariableCount;
    statesSize = size(STATES);
    statesColumnCount = statesSize(2);
    if ( statesColumnCount == 1)
        STATES = STATES';
        ALGEBRAIC = zeros(1, algebraicVariableCount);
        utilOnes = 1;
    else
        statesRowCount = statesSize(1);
        ALGEBRAIC = zeros(statesRowCount, algebraicVariableCount);
        RATES = zeros(statesRowCount, statesColumnCount);
        utilOnes = ones(statesRowCount, 1);
    end
    ALGEBRAIC(:,3) = ( 0.100000.*(STATES(:,1)+25.0000))./(exp((STATES(:,1)+25.0000)./10.0000) - 1.00000);
    ALGEBRAIC(:,7) =  4.00000.*exp(STATES(:,1)./18.0000);
    RATES(:,3) =  ALGEBRAIC(:,3).*(1.00000 - STATES(:,3)) -  ALGEBRAIC(:,7).*STATES(:,3);
    ALGEBRAIC(:,4) =  0.0700000.*exp(STATES(:,1)./20.0000);
    ALGEBRAIC(:,8) = 1.00000./(exp((STATES(:,1)+30.0000)./10.0000)+1.00000);
    RATES(:,2) =  ALGEBRAIC(:,4).*(1.00000 - STATES(:,2)) -  ALGEBRAIC(:,8).*STATES(:,2);
    ALGEBRAIC(:,5) = ( 0.0100000.*(STATES(:,1)+10.0000))./(exp((STATES(:,1)+10.0000)./10.0000) - 1.00000);
    ALGEBRAIC(:,9) =  0.125000.*exp(STATES(:,1)./80.0000);
    RATES(:,4) =  ALGEBRAIC(:,5).*(1.00000 - STATES(:,4)) -  ALGEBRAIC(:,9).*STATES(:,4);
    ALGEBRAIC(:,6) =  CONSTANTS(:,11).*power(STATES(:,3), 3.00000).*STATES(:,2);
    ALGEBRAIC(:,10) =  ALGEBRAIC(:,6).*(STATES(:,1) - CONSTANTS(:,8));
    ALGEBRAIC(:,11) =  CONSTANTS(:,12).*power(STATES(:,4), 4.00000);
    ALGEBRAIC(:,12) =  ALGEBRAIC(:,11).*(STATES(:,1) - CONSTANTS(:,9));
    ALGEBRAIC(:,13) =  CONSTANTS(:,13).*(STATES(:,1) - CONSTANTS(:,10));
    ALGEBRAIC(:,2) = piecewise({ rem(VOI, CONSTANTS(:,1))<CONSTANTS(:,2), CONSTANTS(:,3) }, 0.00000);
    RATES(:,1) = (ALGEBRAIC(:,2) - (ALGEBRAIC(:,10)+ALGEBRAIC(:,12)+ALGEBRAIC(:,13)))./CONSTANTS(:,14);
   RATES = RATES';
end

% Calculate algebraic variables
function ALGEBRAIC = computeAlgebraic(ALGEBRAIC, CONSTANTS, STATES, VOI)
    statesSize = size(STATES);
    statesColumnCount = statesSize(2);
    if ( statesColumnCount == 1)
        STATES = STATES';
        utilOnes = 1;
    else
        statesRowCount = statesSize(1);
        utilOnes = ones(statesRowCount, 1);
    end
    ALGEBRAIC(:,3) = ( 0.100000.*(STATES(:,1)+25.0000))./(exp((STATES(:,1)+25.0000)./10.0000) - 1.00000);
    ALGEBRAIC(:,7) =  4.00000.*exp(STATES(:,1)./18.0000);
    ALGEBRAIC(:,4) =  0.0700000.*exp(STATES(:,1)./20.0000);
    ALGEBRAIC(:,8) = 1.00000./(exp((STATES(:,1)+30.0000)./10.0000)+1.00000);
    ALGEBRAIC(:,5) = ( 0.0100000.*(STATES(:,1)+10.0000))./(exp((STATES(:,1)+10.0000)./10.0000) - 1.00000);
    ALGEBRAIC(:,9) =  0.125000.*exp(STATES(:,1)./80.0000);
    ALGEBRAIC(:,6) =  CONSTANTS(:,11).*power(STATES(:,3), 3.00000).*STATES(:,2);
    ALGEBRAIC(:,10) =  ALGEBRAIC(:,6).*(STATES(:,1) - CONSTANTS(:,8));
    ALGEBRAIC(:,11) =  CONSTANTS(:,12).*power(STATES(:,4), 4.00000);
    ALGEBRAIC(:,12) =  ALGEBRAIC(:,11).*(STATES(:,1) - CONSTANTS(:,9));
    ALGEBRAIC(:,13) =  CONSTANTS(:,13).*(STATES(:,1) - CONSTANTS(:,10));
    ALGEBRAIC(:,2) = piecewise({ rem(VOI, CONSTANTS(:,1))<CONSTANTS(:,2), CONSTANTS(:,3) }, 0.00000);
    ALGEBRAIC(:,1) =  - STATES(:,1);
end

% Compute result of a piecewise function
function x = piecewise(cases, default)
    set = [0];
    for i = 1:2:length(cases)
        if (length(cases{i+1}) == 1)
            x(cases{i} & ~set,:) = cases{i+1};
        else
            x(cases{i} & ~set,:) = cases{i+1}(cases{i} & ~set);
        end
        set = set | cases{i};
        if(set), break, end
    end
    if (length(default) == 1)
        x(~set,:) = default;
    else
        x(~set,:) = default(~set);
    end
end

% Pad out or shorten strings to a set length
function strout = strpad(strin)
    req_length = 160;
    insize = size(strin,2);
    if insize > req_length
        strout = strin(1:req_length);
    else
        strout = [strin, blanks(req_length - insize)];
    end
end
